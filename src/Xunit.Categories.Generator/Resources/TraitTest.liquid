using FluentAssertions;
using Xunit;
using Xunit.Categories;

namespace Xunit.Categories.Test
{
    public class {{ categoryname }}DiscoverTests
        {
        [Fact]
        public void WhenNoIdentifierSpecifiedShouldAddCategoryTrait()
        {
            var discoverer = new {{ categoryname }}Discoverer();
            var traits = discoverer.GetTraits( new MockAttributeInfo());
            traits.Should().HaveCount(1)
            .And.ContainKey("Category")
            .And.ContainValue("{{ categoryname }}");
        }
        
        [Fact]
        public void WhenIdentifierSpecifiedShouldAddCategoryAnd{{ categoryname }}Trait()
        {
            var discoverer = new {{ categoryname }}Discoverer();
            var traits = discoverer.GetTraits( new MockAttributeInfo("888"));
            traits.Should().HaveCount(2)
            .And.ContainKey("Category")
            .And.ContainValue("{{ categoryname }}")
            .And.ContainKey("{{ categoryname }}")
            .And.ContainValue("888");
        }
    }

    public class {{ categoryname }}TraitTests
    {
        [Fact]
        public void FactTest()
        {
            var testMethod = typeof({{ categoryname }}TraitTests).GetMethod(nameof(FactTest));
            testMethod.Should().BeDecoratedWith<FactAttribute>();
        }
        
        [Fact]
        [{{ categoryname }}]
        public void {{ categoryname }}Test()
        {
            var testMethod = typeof({{ categoryname }}TraitTests).GetMethod(nameof({{ categoryname }}Test));
            testMethod.Should()
            .BeDecoratedWith<FactAttribute>()
                .And.BeDecoratedWith<{{ categoryname }}Attribute>();
        }

        [Fact]
        [{{ categoryname }}("888")]
        public void {{ categoryname }}WithIdentifierAsString()
        {
            var testMethod = typeof({{ categoryname }}TraitTests).GetMethod(nameof( {{ categoryname }}WithIdentifierAsString));
            testMethod.Should()
            .BeDecoratedWith<FactAttribute>()
                .And.BeDecoratedWith<{{ categoryname }}Attribute>()
                .Which.Identifier.Should().Be("888");
        }

        [Fact]
        [{{ categoryname }}(888)]
        public void {{ categoryname }}WithIdentifierAsInteger()
        {
            var testMethod = typeof({{ categoryname }}TraitTests).GetMethod(nameof( {{ categoryname }}WithIdentifierAsInteger));
            testMethod.Should()
            .BeDecoratedWith<FactAttribute>()
                .And.BeDecoratedWith<{{ categoryname }}Attribute>()
                    .Which.Identifier.Should().Be("888");
        }
                    
    }
}